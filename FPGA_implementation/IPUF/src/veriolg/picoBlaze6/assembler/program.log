KCPSM6 Assembler log file for program 'D:\GitHub\IPUF\IPUF\src\veriolg\picoBlaze6\assembler\program.psm'.
Generated by KCPSM6 version v2.70
Ken Chapman - Xilinx Ltd - 16th May 2014

Assembly datestamp: 29 Dec 2017
Assembly timestamp: 00:32:27

Contents
  Assembly listing
  List of PSM files
  List of CONSTANTs
  List of TABLEs
  List of STRINGs
  List of line labels
  Instruction usage statistics


Last occupied address: 09D hex
Nominal program memory size: 1K (1024)   address(9:0)
Actual memory size: 4096
  (Default memory size)
Occupied memory locations: 158
Memory locations available: 3938


Assembly listing

 Addr Code                         Instruction

 000                               ;******************************************************************
 000                               ; Author      : D P Sahoo
 000                               ; Email       : dpsahoo.cs@gmail.com
 000                               ; Date        : 06.01.2014
 000                               ; Last Update : 04/11/2017
 000                               ;******************************************************************
 000                               ; Description: This will be executed by picoBlaze microcontroller.
 000                               ; It will apply challenges to PUF cuircuit and work as controller
 000                               ; to PUF, and finally receive response to tranfer to PC.
 000                               ;
 000                               ;******************************************************************
 000                               ;
 000                               ; Define Constants
 000                               ;*****************************************************************
 000                               CONSTANT WSIZE, 08                       ; Word size
 000                               CONSTANT C_BASE_ADDR, 00                 ; Challenge base address
 000                               ; RS232 port's status
 000                               CONSTANT tx_half_full, 01                ;  Transmitter half full - bit0
 000                               CONSTANT tx_full, 02                     ;  FIFO full    - bit1
 000                               CONSTANT rx_half_full, 04                ;  Receiver half full  - bit2
 000                               CONSTANT rx_full, 08                     ;  FIFO full    - bit3
 000                               CONSTANT rx_data_present, 10             ;  data present    - bit4
 000                               ;
 000                               ; Output ports (8-bits)
 000                               CONSTANT CHAL_1_PORT_O, 00               ;
 000                               CONSTANT CHAL_2_PORT_O, 01               ;
 000                               CONSTANT CHAL_3_PORT_O, 02               ;
 000                               CONSTANT CHAL_4_PORT_O, 03               ;
 000                               CONSTANT CHAL_5_PORT_O, 04               ;
 000                               CONSTANT CHAL_6_PORT_O, 05               ;
 000                               CONSTANT CHAL_7_PORT_O, 06               ;
 000                               CONSTANT CHAL_8_PORT_O, 07               ;
 000                               CONSTANT CHAL_9_PORT_O, 08               ;
 000                               CONSTANT CHAL_10_PORT_O, 09              ;
 000                               CONSTANT CHAL_11_PORT_O, 0A              ;
 000                               CONSTANT CHAL_12_PORT_O, 0B              ;
 000                               CONSTANT CHAL_13_PORT_O, 0C              ;
 000                               CONSTANT CHAL_14_PORT_O, 0D              ;
 000                               CONSTANT CHAL_15_PORT_O, 0E              ;
 000                               CONSTANT CHAL_16_PORT_O, 0F              ;
 000                               CONSTANT CHAL_EN_PORT_O, 10              ;
 000                               CONSTANT UART_Tx_PORT_O, 11              ;
 000                               CONSTANT PUF_START_PORT_O, 12            ;
 000                               ;
 000                               ; Input ports (8-bit)
 000                               CONSTANT UART_STATUS_PORT_I, 00          ;
 000                               CONSTANT UART_Rx_PORT_I, 01              ;
 000                               CONSTANT RESP_READY_PORT_I, 02           ;
 000                               CONSTANT RESP_1_PORT_I, 03               ;
 000                               CONSTANT RESP_2_PORT_I, 04               ;
 000                               CONSTANT RESP_3_PORT_I, 05               ;
 000                               CONSTANT RESP_4_PORT_I, 06               ;
 000                               CONSTANT RESP_5_PORT_I, 07               ;
 000                               CONSTANT RESP_6_PORT_I, 08               ;
 000                               CONSTANT RESP_7_PORT_I, 09               ;
 000                               CONSTANT RESP_8_PORT_I, 0A               ;
 000                               CONSTANT RESP_9_PORT_I, 0B               ;
 000                               CONSTANT RESP_10_PORT_I, 0C              ;
 000                               CONSTANT RESP_11_PORT_I, 0D              ;
 000                               CONSTANT RESP_12_PORT_I, 0E              ;
 000                               CONSTANT RESP_13_PORT_I, 0F              ;
 000                               CONSTANT RESP_14_PORT_I, 10              ;
 000                               CONSTANT RESP_15_PORT_I, 11              ;
 000                               CONSTANT RESP_16_PORT_I, 12              ;
 000                               ;
 000                               ; Scratchpad memory addresses to store  challenge.
 000                               CONSTANT CHAL_1, 00                      ;
 000                               CONSTANT CHAL_2, 01                      ;
 000                               CONSTANT CHAL_3, 02                      ;
 000                               CONSTANT CHAL_4, 03                      ;
 000                               CONSTANT CHAL_5, 04                      ;
 000                               CONSTANT CHAL_6, 05                      ;
 000                               CONSTANT CHAL_7, 06                      ;
 000                               CONSTANT CHAL_8, 07                      ;
 000                               CONSTANT CHAL_9, 08                      ;
 000                               CONSTANT CHAL_10, 09                     ;
 000                               CONSTANT CHAL_11, 0A                     ;
 000                               CONSTANT CHAL_12, 0B                     ;
 000                               CONSTANT CHAL_13, 0C                     ;
 000                               CONSTANT CHAL_14, 0D                     ;
 000                               CONSTANT CHAL_15, 0E                     ;
 000                               CONSTANT CHAL_16, 0F                     ;
 000                               ;
 000                               ; Commands [PC <=> PICO]
 000                               ;*****************************************************************
 000                               CONSTANT CHAR_C, 43                      ; Prepare to receive challenges. (PC -> PICO)
 000                               CONSTANT CHAR_V, 56                      ; Send the received challenges. (PC -> PICO)
 000                               CONSTANT CHAR_B, 42                      ; Next Bytes are received challenges. (PICO -> PC)
 000                               CONSTANT CHAR_R, 52                      ; Response Ready and Next two bytes are responses (PICO -> PC)
 000                               CONSTANT CHAR_S, 53                      ; Start PUF evaluation. (PC -> PICO)
 000                               CONSTANT CHAR_Q, 51                      ; Reply of command S.
 000                               CONSTANT CHAR_N, 4E                      ; Received responses are not same. Resend responses. (PC -> PICO)
 000                               CONSTANT CHAR_A, 41                      ; To check whether connection is active or not. (PC -> PICO)
 000                               CONSTANT CHAR_Y, 59                      ; response of command A. Y = Yes (PICO -> PC)
 000                               CONSTANT CHAR_W, 57                      ; Wait for response (PC -> PICO)
 000                               CONSTANT CHAR_E, 45                      ; reply: Evaluation has not finished yet.
 000                               CONSTANT CHAR_F, 46                      ; reply: Evaluation finished.
 000                               ;
 000                               ; Renamed registers
 000                               ;*****************************************************************
 000                               NAMEREG sF, UART_data                    ; used to pass data to and from the UART
 000                               NAMEREG sE, RESP_data                    ; used to store response
 000                               NAMEREG sD, nWORD                        ; Number of 64-bit words
 000                               NAMEREG sC, ADDR_REG                     ;
 000                               NAMEREG sB, WID                          ; Word ID
 000                               NAMEREG sA, CPORT_ID                     ; Word ID
 000                               ; Actions
 000                               ;*****************************************************************
 000                        START: 
 000                               ;**************************
 000              welcome_to_pico: 
 000                               ;**************************
 000  01F68                        LOAD sF[UART_data], 68[character_h]
 001  20021                        CALL 021[write_character]
 002  01F65                        LOAD sF[UART_data], 65[character_e]
 003  20021                        CALL 021[write_character]
 004  01F6C                        LOAD sF[UART_data], 6C[character_l]
 005  20021                        CALL 021[write_character]
 006  01F6C                        LOAD sF[UART_data], 6C[character_l]
 007  20021                        CALL 021[write_character]
 008  01F6F                        LOAD sF[UART_data], 6F[character_o]
 009  20021                        CALL 021[write_character]
 00A                               ;***************************
 00A                 COMMAND_Loop: 
 00A                               ;***************************
 00A  09000                        INPUT s0, 00[UART_STATUS_PORT_I]
 00B  0D010                        TEST s0, 10[rx_data_present]
 00C  3200A                        JUMP Z, 00A[COMMAND_Loop]
 00D  09F01                        INPUT sF[UART_data], 01[UART_Rx_PORT_I]
 00E  1DF41                        COMPARE sF[UART_data], 41[CHAR_A]        ; Are you active ? [PICO <- PC]
 00F  32019                        JUMP Z, 019[send_reply]
 010  1DF43                        COMPARE sF[UART_data], 43[CHAR_C]        ; Read challenge  [PICO <- PC]
 011  32026                        JUMP Z, 026[read_challenge]
 012  1DF56                        COMPARE sF[UART_data], 56[character_V]   ; Send received challenge [PICO <- PC]
 013  32039                        JUMP Z, 039[send_challenge]
 014  1DF53                        COMPARE sF[UART_data], 53[CHAR_S]        ; Start PUF evaluation [PICO <- PC]
 015  3204C                        JUMP Z, 04C[evaluate_PUF]
 016  1DF57                        COMPARE sF[UART_data], 57[CHAR_W]        ; Waiting for response [PICO <- PC]
 017  32079                        JUMP Z, 079[check_resp_status]
 018                               ;COMPARE UART_data, CHAR_N         ; Resend response [PICO <- PC]
 018                               ;JUMP  Z, resend_response
 018  2200A                        JUMP 00A[COMMAND_Loop]
 019                               ;*******************************
 019                               ; For connection reachability
 019                   send_reply: 
 019                               ;*******************************
 019                               ;INPUT UART_data, UART_Rx_PORT_I
 019                               ;CALL   write_character
 019  01F59                        LOAD sF[UART_data], 59[character_Y]
 01A  20021                        CALL 021[write_character]
 01B                               ;CALL  test_v_msg
 01B                               ;LOAD UART_data, character_E
 01B                               ;CALL   write_character
 01B                               ;LOAD UART_data, character_S
 01B                               ;CALL   write_character
 01B  2200A                        JUMP 00A[COMMAND_Loop]
 01C                               ;**********************************************
 01C               read_character: ;Read a character from UART_Rx
 01C                               ;**********************************************
 01C  09000                        INPUT s0, 00[UART_STATUS_PORT_I]
 01D  0D010                        TEST s0, 10[rx_data_present]
 01E  3201C                        JUMP Z, 01C[read_character]
 01F  09F01                        INPUT sF[UART_data], 01[UART_Rx_PORT_I]  ;read from FIFO
 020  25000                        RETURN 
 021                               ;***********************************************
 021              write_character: ; Write a character to UART_Tx
 021                               ;***********************************************
 021  09000                        INPUT s0, 00[UART_STATUS_PORT_I]
 022  0D002                        TEST s0, 02[tx_full]
 023  36021                        JUMP NZ, 021[write_character]
 024  2DF11                        OUTPUT sF[UART_data], 11[UART_Tx_PORT_O]
 025  25000                        RETURN 
 026                               ;***********************************************
 026               read_challenge: ; Read Challenge bytes from PC and
 026                               ;store in scratchpad memory
 026                               ;***********************************************
 026  2001C                        CALL 01C[read_character]
 027  00DF0                        LOAD sD[nWORD], sF[UART_data]            ; Number of 64-bit words
 028  01C00                        LOAD sC[ADDR_REG], 00[C_BASE_ADDR]
 029  2EDC0                        STORE sD[nWORD], (sC[ADDR_REG])          ; First location contains number of challenge words
 02A  11C01                        ADD sC[ADDR_REG], 01
 02B  01100                        LOAD s1, 00                              ; reset the loop counter
 02C                     L1_START: 
 02C  1C1D0                        COMPARE s1, sD[nWORD]
 02D  3E038                        JUMP NC, 038[L1_END]
 02E  01200                        LOAD s2, 00
 02F                     L2_START: 
 02F  1D208                        COMPARE s2, 08[WSIZE]                    ; Word size in Bytes
 030  3E036                        JUMP NC, 036[L2_END]
 031  2001C                        CALL 01C[read_character]
 032  2EFC0                        STORE sF[UART_data], (sC[ADDR_REG])
 033  11C01                        ADD sC[ADDR_REG], 01
 034  11201                        ADD s2, 01
 035  2202F                        JUMP 02F[L2_START]
 036                       L2_END: 
 036  11101                        ADD s1, 01
 037  2202C                        JUMP 02C[L1_START]
 038                       L1_END: 
 038  2200A                        JUMP 00A[COMMAND_Loop]
 039                               ;***************************************
 039                               ;Service Routine for command V
 039               send_challenge: ; send 8 byte challenges to PC
 039                               ;***************************************
 039  01F42                        LOAD sF[UART_data], 42[character_B]      ; tells host(PC) application that next bytes are challenges.
 03A  20021                        CALL 021[write_character]
 03B                               ;CALL read_character
 03B  01C00                        LOAD sC[ADDR_REG], 00[C_BASE_ADDR]
 03C  0ADC0                        FETCH sD[nWORD], (sC[ADDR_REG])          ; Number of 64-bit words
 03D  11C01                        ADD sC[ADDR_REG], 01
 03E  01100                        LOAD s1, 00                              ; reset the loop counter
 03F                   L1_START_V: 
 03F  1C1D0                        COMPARE s1, sD[nWORD]
 040  3E04B                        JUMP NC, 04B[L1_END_V]
 041  01200                        LOAD s2, 00
 042                   L2_START_V: 
 042  1D208                        COMPARE s2, 08[WSIZE]                    ; Word size in Bytes
 043  3E049                        JUMP NC, 049[L2_END_V]
 044  0AFC0                        FETCH sF[UART_data], (sC[ADDR_REG])
 045  20021                        CALL 021[write_character]
 046  11C01                        ADD sC[ADDR_REG], 01
 047  11201                        ADD s2, 01
 048  22042                        JUMP 042[L2_START_V]
 049                     L2_END_V: 
 049  11101                        ADD s1, 01
 04A  2203F                        JUMP 03F[L1_START_V]
 04B                     L1_END_V: 
 04B  2200A                        JUMP 00A[COMMAND_Loop]
 04C                               ;*********************************************
 04C                               ;Service Routine for command S
 04C                               ;Apply challenge to PUF and wait for response
 04C                 evaluate_PUF: ;[controlling PUF activities]
 04C                               ;*********************************************
 04C                               ;Initialize control signals
 04C  01000                        LOAD s0, 00
 04D  2D010                        OUTPUT s0, 10[CHAL_EN_PORT_O]
 04E  2D009                        OUTPUT s0, 09[CHAL_10_PORT_O]            ; tigSignal = 0 for upper XOR APUF
 04F  2D00A                        OUTPUT s0, 0A[CHAL_11_PORT_O]            ; tigSignal = 0 for lower XOR APUF
 050                               ; Send challenge to User logic
 050  01C00                        LOAD sC[ADDR_REG], 00[C_BASE_ADDR]
 051  0ADC0                        FETCH sD[nWORD], (sC[ADDR_REG])          ; Number of 64-bit words
 052  11C01                        ADD sC[ADDR_REG], 01
 053  01001                        LOAD s0, 01
 054  2D010                        OUTPUT s0, 10[CHAL_EN_PORT_O]
 055                               ;LOAD WID, 01                 ; Word ID
 055  01100                        LOAD s1, 00                              ; reset the loop counter
 056                   L1_START_S: 
 056  01300                        LOAD s3, 00
 057  2D30F                        OUTPUT s3, 0F[CHAL_16_PORT_O]            ; write word enable
 058  1C1D0                        COMPARE s1, sD[nWORD]
 059  3E06B                        JUMP NC, 06B[L1_END_S]
 05A  01200                        LOAD s2, 00
 05B  2D100                        OUTPUT s1, 00[CHAL_1_PORT_O]             ; Word ID
 05C  01A01                        LOAD sA[CPORT_ID], 01[CHAL_2_PORT_O]
 05D                   L2_START_S: 
 05D  1D208                        COMPARE s2, 08[WSIZE]                    ; Word size in Bytes
 05E  3E065                        JUMP NC, 065[L2_END_S]
 05F  0A0C0                        FETCH s0, (sC[ADDR_REG])
 060  2C0A0                        OUTPUT s0, (sA[CPORT_ID])
 061  11A01                        ADD sA[CPORT_ID], 01
 062  11C01                        ADD sC[ADDR_REG], 01
 063  11201                        ADD s2, 01
 064  2205D                        JUMP 05D[L2_START_S]
 065                     L2_END_S: 
 065  01301                        LOAD s3, 01
 066  2D30F                        OUTPUT s3, 0F[CHAL_16_PORT_O]            ; write word enable
 067                               ; Delay
 067  0101F                        LOAD s0, 1F
 068  2008A                        CALL 08A[delay]
 069  11101                        ADD s1, 01
 06A  22056                        JUMP 056[L1_START_S]
 06B                     L1_END_S: 
 06B                               ; Delay
 06B  0100F                        LOAD s0, 0F
 06C  2008A                        CALL 08A[delay]
 06D                               ; Trigger APUFs in the upper XOR APUF
 06D  01001                        LOAD s0, 01
 06E  2D009                        OUTPUT s0, 09[CHAL_10_PORT_O]            ; tigSignal = 1 for upper XOR APUF
 06F                               ; Response ready status for upper XOR APUF
 06F                       W_LOOP: 
 06F  09012                        INPUT s0, 12[RESP_16_PORT_I]
 070  1D001                        COMPARE s0, 01
 071  3606F                        JUMP NZ, 06F[W_LOOP]
 072                               ; Delay
 072  0100F                        LOAD s0, 0F
 073  2008A                        CALL 08A[delay]
 074                               ; Trigger APUFs in the upper XOR APUF
 074  01001                        LOAD s0, 01
 075  2D00A                        OUTPUT s0, 0A[CHAL_11_PORT_O]            ; tigSignal = 1 for lower XOR APUF
 076                               ; Inform PC that PUF evaluation is in progress
 076  01F51                        LOAD sF[UART_data], 51[CHAR_Q]
 077  20021                        CALL 021[write_character]
 078  2200A                        JUMP 00A[COMMAND_Loop]
 079                               ;*****************************************
 079                               ; Check response status
 079            check_resp_status: 
 079                               ;*****************************************
 079                               ; Delay
 079  010FF                        LOAD s0, FF
 07A  2008A                        CALL 08A[delay]
 07B                               ; Response ready status
 07B  09002                        INPUT s0, 02[RESP_READY_PORT_I]
 07C  1D001                        COMPARE s0, 01
 07D  32081                        JUMP Z, 081[send_response]
 07E                               ; Evaluation is still going on.
 07E  01F45                        LOAD sF[UART_data], 45[CHAR_E]
 07F  20021                        CALL 021[write_character]
 080  2200A                        JUMP 00A[COMMAND_Loop]
 081                               ;*****************************************
 081                               ; Send all responses
 081                send_response: 
 081                               ;*****************************************
 081                               ; Delay
 081                               ;LOAD   s0, ff
 081                               ;CALL   delay
 081                               ; Inform PC that PUF evaluation is done and next bytes are responses
 081  01F46                        LOAD sF[UART_data], 46[CHAR_F]
 082  20021                        CALL 021[write_character]
 083                               ;INPUT  RESP_data, RESP_5_PORT_I
 083                               ;LOAD   UART_data, RESP_data
 083                               ;CALL   write_character
 083                               ;INPUT  RESP_data, RESP_4_PORT_I
 083                               ;LOAD   UART_data, RESP_data
 083                               ;CALL   write_character
 083                               ;INPUT  RESP_data, RESP_3_PORT_I
 083                               ;LOAD   UART_data, RESP_data
 083                               ;CALL   write_character
 083  09E04                        INPUT sE[RESP_data], 04[RESP_2_PORT_I]
 084  00FE0                        LOAD sF[UART_data], sE[RESP_data]
 085  20021                        CALL 021[write_character]
 086  09E03                        INPUT sE[RESP_data], 03[RESP_1_PORT_I]
 087  00FE0                        LOAD sF[UART_data], sE[RESP_data]
 088  20021                        CALL 021[write_character]
 089                               ; Go back to command menu
 089  2200A                        JUMP 00A[COMMAND_Loop]
 08A                               ;*****************************************
 08A                               ;Delay Routine
 08A                        delay: 
 08A                               ;Put no. of NOP operation you want inside
 08A                               ;delay routine in register s0.
 08A                               ;*****************************************
 08A  1D000                        COMPARE s0, 00
 08B  31000                        RETURN Z
 08C  00000                        LOAD s0, s0                              ; NOP operation
 08D  19001                        SUB s0, 01
 08E  2208A                        JUMP 08A[delay]
 08F                               ;**************************************
 08F         wait_for_response_L0: 
 08F                               ;**************************************
 08F  09003                        INPUT s0, 03[RESP_1_PORT_I]
 090  1D001                        COMPARE s0, 01
 091  31000                        RETURN Z
 092                               ; Delay
 092  0100F                        LOAD s0, 0F
 093  2008A                        CALL 08A[delay]
 094  2208F                        JUMP 08F[wait_for_response_L0]
 095                               ;**************************************
 095                               ; Test message [to verify rechability]
 095                   test_v_msg: 
 095                               ;**************************************
 095  01F54                        LOAD sF[UART_data], 54[character_T]
 096  20021                        CALL 021[write_character]
 097  01F45                        LOAD sF[UART_data], 45[character_E]
 098  20021                        CALL 021[write_character]
 099  01F53                        LOAD sF[UART_data], 53[character_S]
 09A  20021                        CALL 021[write_character]
 09B  01F54                        LOAD sF[UART_data], 54[character_T]
 09C  20021                        CALL 021[write_character]
 09D  25000                        RETURN 
 09E                               ; ASCII table
 09E                               ;******************************************************************
 09E                               CONSTANT character_a, 61
 09E                               CONSTANT character_b, 62
 09E                               CONSTANT character_c, 63
 09E                               CONSTANT character_d, 64
 09E                               CONSTANT character_e, 65
 09E                               CONSTANT character_f, 66
 09E                               CONSTANT character_g, 67
 09E                               CONSTANT character_h, 68
 09E                               CONSTANT character_i, 69
 09E                               CONSTANT character_j, 6A
 09E                               CONSTANT character_k, 6B
 09E                               CONSTANT character_l, 6C
 09E                               CONSTANT character_m, 6D
 09E                               CONSTANT character_n, 6E
 09E                               CONSTANT character_o, 6F
 09E                               CONSTANT character_p, 70
 09E                               CONSTANT character_q, 71
 09E                               CONSTANT character_r, 72
 09E                               CONSTANT character_s, 73
 09E                               CONSTANT character_t, 74
 09E                               CONSTANT character_u, 75
 09E                               CONSTANT character_v, 76
 09E                               CONSTANT character_w, 77
 09E                               CONSTANT character_x, 78
 09E                               CONSTANT character_y, 79
 09E                               CONSTANT character_z, 7A
 09E                               CONSTANT character_A, 41
 09E                               CONSTANT character_B, 42
 09E                               CONSTANT character_C, 43
 09E                               CONSTANT character_D, 44
 09E                               CONSTANT character_E, 45
 09E                               CONSTANT character_F, 46
 09E                               CONSTANT character_G, 47
 09E                               CONSTANT character_H, 48
 09E                               CONSTANT character_I, 49
 09E                               CONSTANT character_J, 4A
 09E                               CONSTANT character_K, 4B
 09E                               CONSTANT character_L, 4C
 09E                               CONSTANT character_M, 4D
 09E                               CONSTANT character_N, 4E
 09E                               CONSTANT character_O, 4F
 09E                               CONSTANT character_P, 50
 09E                               CONSTANT character_Q, 51
 09E                               CONSTANT character_R, 52
 09E                               CONSTANT character_S, 53
 09E                               CONSTANT character_T, 54
 09E                               CONSTANT character_U, 55
 09E                               CONSTANT character_V, 56
 09E                               CONSTANT character_W, 57
 09E                               CONSTANT character_X, 58
 09E                               CONSTANT character_Y, 59
 09E                               CONSTANT character_Z, 5A
 09E                               CONSTANT character_0, 30
 09E                               CONSTANT character_1, 31
 09E                               CONSTANT character_2, 32
 09E                               CONSTANT character_3, 33
 09E                               CONSTANT character_4, 34
 09E                               CONSTANT character_5, 35
 09E                               CONSTANT character_6, 36
 09E                               CONSTANT character_7, 37
 09E                               CONSTANT character_8, 38
 09E                               CONSTANT character_9, 39
 09E                               CONSTANT character_colon, 3A
 09E                               CONSTANT character_semi_colon, 3B
 09E                               CONSTANT character_less_than, 3C
 09E                               CONSTANT character_greater_than, 3E
 09E                               CONSTANT character_equals, 3D
 09E                               CONSTANT character_space, 20
 09E                               CONSTANT character_CR, 0D                ;carriage return
 09E                               CONSTANT character_question, 3F          ;'?'
 09E                               CONSTANT character_dollar, 24
 09E                               CONSTANT character_BS, 08                ;Back Space command character
 09E                               ;************************* END ************************


All unused memory locations contain zero (equivalent to 'LOAD s0, s0')



List of PSM files that have been assembled

D:\GitHub\IPUF\IPUF\src\veriolg\picoBlaze6\assembler\program.psm



List of defined constants

 CONSTANT name          Value        Source PSM File

 timestamp_hours        00'd         
 timestamp_minutes      32'd         
 timestamp_seconds      27'd         
 datestamp_year         17'd         
 datestamp_month        12'd         
 datestamp_day          29'd         
 NUL                    00           
 BEL                    07           
 BS                     08           
 HT                     09           
 LF                     0A           
 VT                     0B           
 CR                     0D           
 ESC                    1B           
 DEL                    7F           
 DCS                    90           
 ST                     9C           
 WSIZE                  08           program.psm
 C_BASE_ADDR            00           program.psm
 tx_half_full           01           program.psm
 tx_full                02           program.psm
 rx_half_full           04           program.psm
 rx_full                08           program.psm
 rx_data_present        10           program.psm
 CHAL_1_PORT_O          00           program.psm
 CHAL_2_PORT_O          01           program.psm
 CHAL_3_PORT_O          02           program.psm
 CHAL_4_PORT_O          03           program.psm
 CHAL_5_PORT_O          04           program.psm
 CHAL_6_PORT_O          05           program.psm
 CHAL_7_PORT_O          06           program.psm
 CHAL_8_PORT_O          07           program.psm
 CHAL_9_PORT_O          08           program.psm
 CHAL_10_PORT_O         09           program.psm
 CHAL_11_PORT_O         0A           program.psm
 CHAL_12_PORT_O         0B           program.psm
 CHAL_13_PORT_O         0C           program.psm
 CHAL_14_PORT_O         0D           program.psm
 CHAL_15_PORT_O         0E           program.psm
 CHAL_16_PORT_O         0F           program.psm
 CHAL_EN_PORT_O         10           program.psm
 UART_Tx_PORT_O         11           program.psm
 PUF_START_PORT_O       12           program.psm
 UART_STATUS_PORT_I     00           program.psm
 UART_Rx_PORT_I         01           program.psm
 RESP_READY_PORT_I      02           program.psm
 RESP_1_PORT_I          03           program.psm
 RESP_2_PORT_I          04           program.psm
 RESP_3_PORT_I          05           program.psm
 RESP_4_PORT_I          06           program.psm
 RESP_5_PORT_I          07           program.psm
 RESP_6_PORT_I          08           program.psm
 RESP_7_PORT_I          09           program.psm
 RESP_8_PORT_I          0A           program.psm
 RESP_9_PORT_I          0B           program.psm
 RESP_10_PORT_I         0C           program.psm
 RESP_11_PORT_I         0D           program.psm
 RESP_12_PORT_I         0E           program.psm
 RESP_13_PORT_I         0F           program.psm
 RESP_14_PORT_I         10           program.psm
 RESP_15_PORT_I         11           program.psm
 RESP_16_PORT_I         12           program.psm
 CHAL_1                 00           program.psm
 CHAL_2                 01           program.psm
 CHAL_3                 02           program.psm
 CHAL_4                 03           program.psm
 CHAL_5                 04           program.psm
 CHAL_6                 05           program.psm
 CHAL_7                 06           program.psm
 CHAL_8                 07           program.psm
 CHAL_9                 08           program.psm
 CHAL_10                09           program.psm
 CHAL_11                0A           program.psm
 CHAL_12                0B           program.psm
 CHAL_13                0C           program.psm
 CHAL_14                0D           program.psm
 CHAL_15                0E           program.psm
 CHAL_16                0F           program.psm
 CHAR_C                 43           program.psm
 CHAR_V                 56           program.psm
 CHAR_B                 42           program.psm
 CHAR_R                 52           program.psm
 CHAR_S                 53           program.psm
 CHAR_Q                 51           program.psm
 CHAR_N                 4E           program.psm
 CHAR_A                 41           program.psm
 CHAR_Y                 59           program.psm
 CHAR_W                 57           program.psm
 CHAR_E                 45           program.psm
 CHAR_F                 46           program.psm
 character_a            61           program.psm
 character_b            62           program.psm
 character_c            63           program.psm
 character_d            64           program.psm
 character_e            65           program.psm
 character_f            66           program.psm
 character_g            67           program.psm
 character_h            68           program.psm
 character_i            69           program.psm
 character_j            6A           program.psm
 character_k            6B           program.psm
 character_l            6C           program.psm
 character_m            6D           program.psm
 character_n            6E           program.psm
 character_o            6F           program.psm
 character_p            70           program.psm
 character_q            71           program.psm
 character_r            72           program.psm
 character_s            73           program.psm
 character_t            74           program.psm
 character_u            75           program.psm
 character_v            76           program.psm
 character_w            77           program.psm
 character_x            78           program.psm
 character_y            79           program.psm
 character_z            7A           program.psm
 character_A            41           program.psm
 character_B            42           program.psm
 character_C            43           program.psm
 character_D            44           program.psm
 character_E            45           program.psm
 character_F            46           program.psm
 character_G            47           program.psm
 character_H            48           program.psm
 character_I            49           program.psm
 character_J            4A           program.psm
 character_K            4B           program.psm
 character_L            4C           program.psm
 character_M            4D           program.psm
 character_N            4E           program.psm
 character_O            4F           program.psm
 character_P            50           program.psm
 character_Q            51           program.psm
 character_R            52           program.psm
 character_S            53           program.psm
 character_T            54           program.psm
 character_U            55           program.psm
 character_V            56           program.psm
 character_W            57           program.psm
 character_X            58           program.psm
 character_Y            59           program.psm
 character_Z            5A           program.psm
 character_0            30           program.psm
 character_1            31           program.psm
 character_2            32           program.psm
 character_3            33           program.psm
 character_4            34           program.psm
 character_5            35           program.psm
 character_6            36           program.psm
 character_7            37           program.psm
 character_8            38           program.psm
 character_9            39           program.psm
 character_colon        3A           program.psm
 character_semi_colon   3B           program.psm
 character_less_than    3C           program.psm
 character_greater_than 3E           program.psm
 character_equals       3D           program.psm
 character_space        20           program.psm
 character_CR           0D           program.psm
 character_question     3F           program.psm
 character_dollar       24           program.psm
 character_BS           08           program.psm



No TABLEs defined



List of text strings

 STRING name       String         Source PSM File

 KCPSM6_version$   "v2.70"        
 datestamp$        "29 Dec 2017"  
 timestamp$        "00:32:27"     



List of line labels

   Label                  Addr  Source PSM File

 * START                  000   program.psm
 * welcome_to_pico        000   program.psm
   COMMAND_Loop           00A   program.psm
   send_reply             019   program.psm
   read_character         01C   program.psm
   write_character        021   program.psm
   read_challenge         026   program.psm
   L1_START               02C   program.psm
   L2_START               02F   program.psm
   L2_END                 036   program.psm
   L1_END                 038   program.psm
   send_challenge         039   program.psm
   L1_START_V             03F   program.psm
   L2_START_V             042   program.psm
   L2_END_V               049   program.psm
   L1_END_V               04B   program.psm
   evaluate_PUF           04C   program.psm
   L1_START_S             056   program.psm
   L2_START_S             05D   program.psm
   L2_END_S               065   program.psm
   L1_END_S               06B   program.psm
   W_LOOP                 06F   program.psm
   check_resp_status      079   program.psm
   send_response          081   program.psm
   delay                  08A   program.psm
   wait_for_response_L0   08F   program.psm
 * test_v_msg             095   program.psm

      * Line label has not been referenced in any instructions.
        Hint - This may indicate unused code that could be
               removed to reduce the size of this program.



Instruction usage statistics

 Instruction    Instances

 LOAD             39
 STAR              -

 AND               -
 OR                -
 XOR               -

 ADD              13
 ADDCY             -
 SUB               1
 SUBCY             -

 TEST              3
 TESTCY            -
 COMPARE          15
 COMPARECY         -

 SL0               -
 SL1               -
 SLX               -
 SLA               -
 RL                -
 SR0               -
 SR1               -
 SRX               -
 SRA               -
 RR                -

 REGBANK           -

 INPUT            10
 OUTPUT           11
 OUTPUTK           -

 STORE             4
 FETCH             4

 DISABLE           -
 ENABLE            -
 RETURNI           -

 JUMP             31
 JUMP@             -
 CALL             24
 CALL@             -
 RETURN            5
 LOAD&RETURN       -

 HWBUILD           -



End of KCPSM6 log file.
